runtime! plugin/altr.vim

function! NormalizePath(path)
  return fnamemodify(a:path, ':p:.')
endfunction

function s:describe__altr_back()  "{{{1
  " Set up
  call altr#remove_all()
  call altr#define('autoload/%.vim', 'NONE/%.vim', 'doc/%.txt', 'plugin/%.vim')

  It should switch to the missing path forward.

  silent view autoload/altr.vim
  Should bufname('%') ==# 'autoload/altr.vim'

  silent! call altr#back()
  Should bufname('%') ==# 'plugin/altr.vim'

  silent! call altr#back()
  Should bufname('%') ==# 'doc/altr.txt'

  silent! call altr#back()
  Should bufname('%') ==# 'autoload/altr.vim'

  " Tear down
  enew!
  call altr#reset()
endfunction




function s:describe__altr_define()  "{{{1
  let R = function('altr#_make_rule')

  It should define a given rule.

  let first = copy(altr#_rule_table())
  Should has_key(first, 'foo') be false
  Should has_key(first, 'bar') be false
  Should has_key(first, 'baz') be false
  Should has_key(first, 'qux') be false

  call altr#define('foo')
  let defined1 = copy(altr#_rule_table())
  Should defined1['foo'] ==# R('foo', 'foo', 'foo')

  call altr#define('foo', 'bar')
  let defined2 = copy(altr#_rule_table())
  Should defined2['foo'] ==# R('foo', 'bar', 'bar')
  Should defined2['bar'] ==# R('bar', 'foo', 'foo')

  call altr#define('foo', 'bar', 'baz')
  let defined3 = copy(altr#_rule_table())
  Should defined3['foo'] ==# R('foo', 'bar', 'baz')
  Should defined3['bar'] ==# R('bar', 'baz', 'foo')
  Should defined3['baz'] ==# R('baz', 'foo', 'bar')

  call altr#define('foo', 'bar', 'baz', 'qux')
  let defined4 = copy(altr#_rule_table())
  Should defined4['foo'] ==# R('foo', 'bar', 'qux')
  Should defined4['bar'] ==# R('bar', 'baz', 'foo')
  Should defined4['baz'] ==# R('baz', 'qux', 'bar')
  Should defined4['qux'] ==# R('qux', 'foo', 'baz')

  It should define a given rule which is passed as a list of patterns.

  call altr#define(['mon', 'tue', 'wed'])
  let defined5 = copy(altr#_rule_table())
  Should defined5['mon'] ==# R('mon', 'tue', 'wed')
  Should defined5['tue'] ==# R('tue', 'wed', 'mon')
  Should defined5['wed'] ==# R('wed', 'mon', 'tue')

  call altr#reset()
endfunction




function s:describe__altr_define_defaults()  "{{{1
  " FIXME: How should it be tested?
endfunction




function s:describe__altr_forward()  "{{{1
  " Set up
  call altr#remove_all()
  call altr#define('autoload/%.vim', 'NONE/%.vim', 'doc/%.txt', 'plugin/%.vim')

  It should switch to the missing path forward.

  silent view autoload/altr.vim
  Should bufname('%') ==# 'autoload/altr.vim'

  silent! call altr#forward()
  Should bufname('%') ==# 'doc/altr.txt'

  silent! call altr#forward()
  Should bufname('%') ==# 'plugin/altr.vim'

  silent! call altr#forward()
  Should bufname('%') ==# 'autoload/altr.vim'

  " Tear down
  enew!
  call altr#reset()
endfunction




function s:describe__altr_remove()  "{{{1
  It should remove a given rule.

  let first = copy(altr#_rule_table())

  Should has_key(first, 'plugin/%.vim') be true

  call altr#remove('plugin/%.vim')
  let removed = copy(altr#_rule_table())

  Should has_key(removed, 'plugin/%.vim') be false

  call altr#reset()
endfunction




function s:describe__altr_remove_all()  "{{{1
  It should remove all rules.

  let first = copy(altr#_rule_table())

  Should empty(first) be false

  call altr#remove_all()
  let removed = copy(altr#_rule_table())

  Should empty(removed) be true

  call altr#reset()
endfunction




function s:describe__altr_reset()  "{{{1
  It should reset to the default state.

  call altr#remove_all()
  call altr#define_defaults()
  let clear_then_define = copy(altr#_rule_table())

  call altr#reset()
  let reset = copy(altr#_rule_table())

  Should reset ==# clear_then_define
endfunction




function s:describe__altr_show()  "{{{1
  It should show a defined rule well.

  redir => output
  silent call altr#show('plugin/%.vim')
  redir END
  Should output ==# "\n'lang/%.vim' <- 'plugin/%.vim' -> 'syntax/%.vim'"

  It should show an undefined rule well.

  redir => output
  silent call altr#show('&$!*()&$!')
  redir END
  Should output ==# "\naltr: No such rule: '&$!*()&$!'"
endfunction




function s:describe__altr__escape_replacement()  "{{{1
  let S = function('substitute')
  let E = function('altr#_escape_replacement')

  It should escape special characters for replacement string for substitute().

  Should E('A-Z a-z 0-9 ...') ==# 'A-Z a-z 0-9 ...'
  Should E('A-Z&a-z\0-9 ...') ==# 'A-Z\&a-z\\0-9 ...'
  Should S('foobar', 'oo..', '<&>', '') ==# 'f<ooba>r'
  Should S('foobar', 'oo..', E('<&>'), '') ==# 'f<&>r'
  Should S('foobar', 'oo..', '<\0>', '') ==# 'f<ooba>r'
  Should S('foobar', 'oo..', E('<\0>'), '') ==# 'f<\0>r'
  Should S('foobar', 'oo..', '<~>', '') ==# 'f<~>r'
  Should S('foobar', 'oo..', '<\~>', '') ==# 'f<~>r'
endfunction




function s:describe__altr__format_rule()  "{{{1
  It should show a given rule well.

  Should altr#_format_rule(altr#_make_rule('current', 'forward', 'back'))
  \ ==# "'back' <- 'current' -> 'forward'"
endfunction




function s:describe__altr__glob_path_from_pattern()  "{{{1
  let G = function('altr#_glob_path_from_pattern')
  let x = {}
  function! x.m(prefix, basepart)
    return ['*UNUSED*', a:prefix, a:basepart] + repeat(['*UNUSED*'], 7)
  endfunction

  It should return proper glob path from given pattern.

  Should G('plugin/%.vim', x.m('', 'altr')) ==# 'plugin/altr.vim'
  Should G('plugin/%.vim', x.m('./', 'altr')) ==# './plugin/altr.vim'
  Should G('plugin/%.vim', x.m('~/.vim/', 'altr')) ==# '~/.vim/plugin/altr.vim'
  Should G('*/%.vim', x.m('./', 'altr')) ==# './*/altr.vim'
  Should G('Makefile', x.m('~/.vim/', 'altr')) ==# '~/.vim/Makefile'

  It should return proper glob path from pattern with "\"s.

  Should G('plugin\%.vim', x.m('', 'altr')) ==# 'plugin\altr.vim'
  Should G('plugin\%.vim', x.m('.\', 'altr')) ==# '.\plugin\altr.vim'
  Should G('plugin\%.vim', x.m('~\.vim\', 'altr')) ==# '~\.vim\plugin\altr.vim'
  Should G('*\%.vim', x.m('.\', 'altr')) ==# '.\*\altr.vim'
  Should G('Makefile', x.m('~\.vim\', 'altr')) ==# '~\.vim\Makefile'
endfunction




function s:describe__altr__infer_the_missing_path()  "{{{1
  let D = function('NormalizePath')
  let I = function('altr#_infer_the_missing_path')
  let T = function('altr#_rule_table')

  It should return 0 if there is no rule to match against basename. (1-b)

  call altr#remove_all()
  Should I('autoload/altr.vim', 'forward', T()) is 0

  It should return a inferred path with "literal" rules. (1-a, 2-b)

  call altr#remove_all()
  call altr#define('autoload/altr.vim', 'plugin/altr.vim')
  Should I('autoload/altr.vim', 'forward', T()) is 'plugin/altr.vim'

  It should return a inferred path with "%" rules. (1-a, 2-b)

  call altr#remove_all()
  call altr#define('autoload/%.vim', 'plugin/%.vim')
  Should I('autoload/altr.vim', 'forward', T()) is 'plugin/altr.vim'

  It should try the "next" of "next" pattern. (1-a, 2-b)

  call altr#remove_all()
  call altr#define('autoload/%.vim', 'NO SUCH DIR/%.vim', 'plugin/%.vim')
  Should I('autoload/altr.vim', 'forward', T()) is 'plugin/altr.vim'

  It should work with an absolute path. (1-a, 2-b)

  cd ./plugin
    call altr#remove_all()
    call altr#define('autoload/%.vim', 'NO SUCH DIR/%.vim', 'plugin/%.vim')
    let d = D(getcwd()) . '../'

    Should D(I((d . 'autoload/altr.vim'), 'forward', T()))
    \ is D(d . 'plugin/altr.vim')
    Should D(I((d . 'plugin/altr.vim'), 'forward', T()))
    \ is D(d . 'autoload/altr.vim')
  cd ..

  It should return a inffered path with "*" rules. (1-a, 2-a)

  call altr#remove_all()
  call altr#define('*/%.vim', 'doc/%.txt')

  Should I('autoload/altr.vim', 'forward', T()) is 'plugin/altr.vim'
  Should I('plugin/altr.vim', 'forward', T()) is 'doc/altr.txt'
  Should I('doc/altr.txt', 'forward', T()) is 'autoload/altr.vim'

  Should I('autoload/altr.vim', 'back', T()) is 'doc/altr.txt'
  Should I('plugin/altr.vim', 'back', T()) is 'autoload/altr.vim'
  Should I('doc/altr.txt', 'back', T()) is 'plugin/altr.vim'

  " Tear down
  call altr#reset()
endfunction




function s:describe__altr__list_paths()  "{{{1
  let L = function('altr#_list_paths')
  let x = {}
  function! x.m(prefix, basepart)
    return ['*UNUSED*', a:prefix, a:basepart] + repeat(['*UNUSED*'], 7)
  endfunction

  It should list an empty list if there is no maching paths.

  Should L('autoload/arpeggio.vim', x.m('./', 'altr')) ==# []

  It should list a path with "literal" pattern.

  Should L('autoload/altr.vim', x.m('./', 'altr'))
  \      ==# ['./autoload/altr.vim']

  It should list a path with "%" pattern.

  Should L('autoload/%.vim', x.m('./', 'altr'))
  \      ==# ['./autoload/altr.vim']

  It should list paths wiwth "*" pattern.

  Should L('*/%.vim', x.m('./', 'altr'))
  \ ==# ['./autoload/altr.vim', './plugin/altr.vim']
endfunction




function s:describe__altr__make_rule()  "{{{1
  It should make a rule properly

  let r = altr#_make_rule('current', 'forward', 'back')
  Should r.current_pattern ==# 'current'
  Should r.forward_pattern ==# 'forward'
  Should r.back_pattern ==# 'back'
endfunction




function s:describe__altr__match_with_buffer_name()  "{{{1
  let R = function('altr#_make_rule')
  let M = function('altr#_match_with_buffer_name')
  let x = {}
  function! x.m(whole, prefix, basepart)
    return [a:whole, a:prefix, a:basepart] + repeat([''], 7)
  endfunction

  It should perform matching properly.

  Should M(R('%.vim', '', ''), 'altr.vim')
  \      ==# [!0, x.m('altr.vim', '', 'altr')]
  Should M(R('%.vim', '', ''), 'plugin/altr.vim')
  \      ==# [!0, x.m('plugin/altr.vim', '', 'plugin/altr')]
  Should M(R('%.vim', '', ''), 'doc/altr.txt')
  \      ==# [!!0, []]
  Should M(R('*.vim', '', ''), 'altr.vim')
  \      ==# [!0, x.m('altr.vim', '', '')]
  Should M(R('Makefile', '', ''), 'Makefile')
  \      ==# [!0, x.m('Makefile', '', '')]

  Should M(R('plugin/%.vim', '', ''), 'plugin/altr.vim')
  \      ==# [!0, x.m('plugin/altr.vim', '', 'altr')]
  Should M(R('plugin/%.vim', '', ''), '~/.vim/plugin/altr.vim')
  \      ==# [!0, x.m('~/.vim/plugin/altr.vim', '~/.vim/', 'altr')]
endfunction




function s:describe__altr__priority_from_rule()  "{{{1
  It should calculate priority of a given rule properly.

  Should altr#_priority_from_rule(altr#_make_rule('foo', '', '')) ==# 30
  Should altr#_priority_from_rule(altr#_make_rule('%.vim', '', '')) ==# 45
  Should altr#_priority_from_rule(altr#_make_rule('*.vim', '', '')) ==# 41
  Should altr#_priority_from_rule(altr#_make_rule('%%.vim', '', '')) ==# 50
  Should altr#_priority_from_rule(altr#_make_rule('**.vim', '', '')) ==# 42
endfunction




function s:describe__altr__regexp_from_pattern()  "{{{1
  It should make a regular expression properly

  Should altr#_regexp_from_pattern('foo') ==# '\V\^\(\.\{-}\)foo\$'
  Should altr#_regexp_from_pattern('foo/bar') ==# '\V\^\(\.\{-}\)foo/bar\$'
  Should altr#_regexp_from_pattern('foo\bar') ==# '\V\^\(\.\{-}\)foo\\bar\$'
  Should altr#_regexp_from_pattern('%.vim') ==# '\V\^\(\.\{-}\)\(\.\*\).vim\$'
  Should altr#_regexp_from_pattern('*.vim') ==# '\V\^\(\.\{-}\)\.\*.vim\$'
endfunction




function s:describe__altr__rule_table()  "{{{1
  It should contains the default rules at first.

  let first = copy(altr#_rule_table())
  call altr#reset()
  let reset = copy(altr#_rule_table())

  Should first ==# reset
endfunction




function s:describe__altr__sort_rules()  "{{{1
  It should return well sorted rules.

  let R = function('altr#_make_rule')
  let rs = [
  \   R('autoload/%.vim', '', ''),
  \   R('doc/%.txt', '', ''),
  \   R('plugin/%.vim', '', ''),
  \ ]
  let rt = {
  \   rs[0].current_pattern: rs[0],
  \   rs[1].current_pattern: rs[1],
  \   rs[2].current_pattern: rs[2],
  \ }

  Should map(altr#_sort_rules(rt), 'v:val.current_pattern')
  \ ==# ['autoload/%.vim', 'plugin/%.vim', 'doc/%.txt']
endfunction




function s:describe__altr__sort_rules_comparer()  "{{{1
  let R = function('altr#_make_rule')
  let C = function('altr#_sort_rules_comparer')

  It should compare rules by priorities.

  Should C(R('foo', '', ''), R('foo', '', '')) == 0
  Should C(R('fo*', '', ''), R('foo', '', '')) < 0
  Should C(R('fo*', '', ''), R('fo%', '', '')) < 0
  Should C(R('fo%', '', ''), R('foo', '', '')) < 0

  It should compare rules by priorities then by current patterns.

  Should C(R('bar', '', ''), R('foo', '', '')) < 0
  Should C(R('ba%', '', ''), R('fo%', '', '')) < 0
  Should C(R('X', '', ''), R('%%%', '', '')) < 0
endfunction




function s:describe__altr__switch()  "{{{1
  " Set up
  call altr#remove_all()
  call altr#define('autoload/%.vim', 'doc/%.txt', 'plugin/%.vim')

  It should show error message if there is no matching rule.

  redir => m
  silent! call altr#_switch('NO SUCH PATH', 'forward', altr#_rule_table())
  redir END
  Should m =~# '\V\<altr: No rule is matched to the current buffer name.'

  It should switch to the missing path forward.

  enew!
  Should bufname('%') ==# ''

  silent! call altr#_switch('autoload/altr.vim', 'forward', altr#_rule_table())
  Should bufname('%') ==# 'doc/altr.txt'

  silent! call altr#_switch('doc/altr.txt', 'forward', altr#_rule_table())
  Should bufname('%') ==# 'plugin/altr.vim'

  silent! call altr#_switch('plugin/altr.vim', 'forward', altr#_rule_table())
  Should bufname('%') ==# 'autoload/altr.vim'

  It should switch to the missing path back.

  enew!
  Should bufname('%') ==# ''

  silent! call altr#_switch('autoload/altr.vim', 'back', altr#_rule_table())
  Should bufname('%') ==# 'plugin/altr.vim'

  silent! call altr#_switch('plugin/altr.vim', 'back', altr#_rule_table())
  Should bufname('%') ==# 'doc/altr.txt'

  silent! call altr#_switch('doc/altr.txt', 'back', altr#_rule_table())
  Should bufname('%') ==# 'autoload/altr.vim'

  It should keep the cursor line if possible.

  silent! edit autoload/altr.vim
  normal! L
  let last_curcor_line = line('.')
  Should bufname('%') ==# 'autoload/altr.vim'
  Should last_curcor_line > 1

  silent! call altr#_switch(bufname('%'), 'forward', altr#_rule_table())
  Should bufname('%') ==# 'doc/altr.txt'

  silent! call altr#_switch(bufname('%'), 'back', altr#_rule_table())
  Should bufname('%') ==# 'autoload/altr.vim'
  Should line('.') == last_curcor_line

  " Tear down
  enew!
  call altr#reset()
endfunction




function s:describe__autoload()  "{{{1
  It should keep the rule table before and after reloading autoload script.

  call altr#reset()
  call altr#define('%.vim', '%.txt')
  let old_rule_table = copy(altr#_rule_table())

  runtime! autoload/altr.vim

  let new_rule_table = copy(altr#_rule_table())
  Should new_rule_table ==# old_rule_table

  call altr#reset()
endfunction




function s:describe__plugin_definitions()  "{{{1
  It should be loaded.

  Should exists('g:loaded_altr') be true

  It should provide <Plug>(atlr-back)

  Should maparg('<Plug>(altr-back)', 'n') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'x') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 's') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'o') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'i') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'c') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'l') ==# ''

  It should provide <Plug>(atlr-forward)

  Should maparg('<Plug>(altr-forward)', 'n') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'x') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 's') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'o') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'i') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'c') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'l') ==# ''
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
