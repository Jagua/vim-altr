runtime! plugin/altr.vim

function s:describe__altr_back()  "{{{1
  " FIXME
endfunction




function s:describe__altr_define()  "{{{1
  let R = function('altr#_make_rule')

  It should define a given rule.

  let first = copy(altr#_rule_table())
  Should has_key(first, 'foo') be false
  Should has_key(first, 'bar') be false
  Should has_key(first, 'baz') be false
  Should has_key(first, 'qux') be false

  call altr#define('foo')
  let defined1 = copy(altr#_rule_table())
  Should defined1['foo'] ==# R('foo', 'foo', 'foo')

  call altr#define('foo', 'bar')
  let defined2 = copy(altr#_rule_table())
  Should defined2['foo'] ==# R('foo', 'bar', 'bar')
  Should defined2['bar'] ==# R('bar', 'foo', 'foo')

  call altr#define('foo', 'bar', 'baz')
  let defined3 = copy(altr#_rule_table())
  Should defined3['foo'] ==# R('foo', 'bar', 'baz')
  Should defined3['bar'] ==# R('bar', 'baz', 'foo')
  Should defined3['baz'] ==# R('baz', 'foo', 'bar')

  call altr#define('foo', 'bar', 'baz', 'qux')
  let defined4 = copy(altr#_rule_table())
  Should defined4['foo'] ==# R('foo', 'bar', 'qux')
  Should defined4['bar'] ==# R('bar', 'baz', 'foo')
  Should defined4['baz'] ==# R('baz', 'qux', 'bar')
  Should defined4['qux'] ==# R('qux', 'foo', 'baz')

  call altr#reset()
endfunction




function s:describe__altr_define_defaults()  "{{{1
  " FIXME: How should it be tested?
endfunction




function s:describe__altr_forward()  "{{{1
  " FIXME
endfunction




function s:describe__altr_remove()  "{{{1
  It should remove a given rule.

  let first = copy(altr#_rule_table())

  Should has_key(first, 'plugin/%.vim') be true

  call altr#remove('plugin/%.vim')
  let removed = copy(altr#_rule_table())

  Should has_key(removed, 'plugin/%.vim') be false

  call altr#reset()
endfunction




function s:describe__altr_remove_all()  "{{{1
  It should remove all rules.

  let first = copy(altr#_rule_table())

  Should empty(first) be false

  call altr#remove_all()
  let removed = copy(altr#_rule_table())

  Should empty(removed) be true

  call altr#reset()
endfunction




function s:describe__altr_reset()  "{{{1
  It should reset to the default state.

  call altr#remove_all()
  call altr#define_defaults()
  let clear_then_define = copy(altr#_rule_table())

  call altr#reset()
  let reset = copy(altr#_rule_table())

  Should reset ==# clear_then_define
endfunction




function s:describe__altr_show()  "{{{1
  It should show a defined rule well.

  redir => output
  silent call altr#show('plugin/%.vim')
  redir END
  Should output ==# "\n'plugin/%.vim' -> 'syntax/%.vim' -> 'lang/%.vim'"

  It should show an undefined rule well.

  redir => output
  silent call altr#show('&$!*()&$!')
  redir END
  Should output ==# "\nNo such rule: '&$!*()&$!'"
endfunction




function s:describe__altr__glob_path_from_pattern()  "{{{1
  It should return a given string as-is.

  Should altr#_glob_path_from_pattern('pattern', 'basepart') ==# 'pattern'

  It should replace '%'s with a given basepart.

  Should altr#_glob_path_from_pattern('<<<%>>>', 'base') ==# '<<<base>>>'
  Should altr#_glob_path_from_pattern('%-%', 'base') ==# 'base-base'
endfunction




function s:describe__altr__infer_the_missing_path()  "{{{1
  " FIXME
endfunction




function s:describe__altr__list_paths()  "{{{1
  It should list paths properly

  Should altr#_list_paths('autoload/altr.vim', '') ==# 'autoload/altr.vim'
  Should altr#_list_paths('autoload/%.vim', 'altr') ==# 'autoload/altr.vim'
endfunction




function s:describe__altr__make_rule()  "{{{1
  It should make a rule properly

  let r = altr#_make_rule('current', 'forward', 'back')
  Should r.current_pattern ==# 'current'
  Should r.forward_pattern ==# 'forward'
  Should r.back_pattern ==# 'back'
endfunction




function s:describe__altr__match_with_buffer_name()  "{{{1
  It should perform matching properly.

  let R = function('altr#_make_rule')
  let M = function('altr#_match_with_buffer_name')

  Should M(R('%.vim', '', ''), 'altr.vim') ==# [!0, 'altr']
  Should M(R('%.vim', '', ''), 'plugin/altr.vim') ==# [!0, 'plugin/altr']
  Should M(R('%.vim', '', ''), 'doc/altr.txt') ==# [!!0, '']
  Should M(R('*.vim', '', ''), 'altr.vim') ==# [!0, '']
  Should M(R('Makefile', '', ''), 'Makefile') ==# [!0, '']
endfunction




function s:describe__altr__priority_from_rule()  "{{{1
  It should calculate priority of a given rule properly.

  Should altr#_priority_from_rule(altr#_make_rule('foo', '', '')) ==# 30
  Should altr#_priority_from_rule(altr#_make_rule('%.vim', '', '')) ==# 45
  Should altr#_priority_from_rule(altr#_make_rule('*.vim', '', '')) ==# 41
  Should altr#_priority_from_rule(altr#_make_rule('%%.vim', '', '')) ==# 50
  Should altr#_priority_from_rule(altr#_make_rule('**.vim', '', '')) ==# 42
endfunction




function s:describe__altr__regexp_from_pattern()  "{{{1
  It should make a regular expression properly

  Should altr#_regexp_from_pattern('foo') ==# '\V\^\.\{-}foo\$'
  Should altr#_regexp_from_pattern('foo/bar') ==# '\V\^\.\{-}foo/bar\$'
  Should altr#_regexp_from_pattern('foo\bar') ==# '\V\^\.\{-}foo\\bar\$'
  Should altr#_regexp_from_pattern('%.vim') ==# '\V\^\.\{-}\(\.\*\).vim\$'
  Should altr#_regexp_from_pattern('*.vim') ==# '\V\^\.\{-}\.\*.vim\$'
endfunction




function s:describe__altr__rule_table()  "{{{1
  It should contains the default rules at first.

  let first = copy(altr#_rule_table())
  call altr#reset()
  let reset = copy(altr#_rule_table())

  Should first ==# reset
endfunction




function s:describe__altr__show_rule()  "{{{1
  It should show a given rule well.

  redir => output
  silent call altr#_show_rule(altr#_make_rule('current', 'forward', 'back'))
  redir END
  Should output ==# "\n'current' -> 'forward' -> 'back'"
endfunction




function s:describe__altr__sort_rules()  "{{{1
  It should return well sorted rules.

  let R = function('altr#_make_rule')
  let rs = [
  \   R('autoload/%.vim', '', ''),
  \   R('doc/%.txt', '', ''),
  \   R('plugin/%.vim', '', ''),
  \ ]
  let rt = {
  \   rs[0].current_pattern: rs[0],
  \   rs[1].current_pattern: rs[1],
  \   rs[2].current_pattern: rs[2],
  \ }

  Should map(altr#_sort_rules(rt), 'v:val.current_pattern')
  \ ==# ['autoload/%.vim', 'plugin/%.vim', 'doc/%.txt']
endfunction




function s:describe__altr__sort_rules_comparer()  "{{{1
  let R = function('altr#_make_rule')
  let C = function('altr#_sort_rules_comparer')

  It should compare rules by priorities.

  Should C(R('foo', '', ''), R('foo', '', '')) == 0
  Should C(R('fo*', '', ''), R('foo', '', '')) < 0
  Should C(R('fo*', '', ''), R('fo%', '', '')) < 0
  Should C(R('fo%', '', ''), R('foo', '', '')) < 0

  It should compare rules by priorities then by current patterns.

  Should C(R('bar', '', ''), R('foo', '', '')) < 0
  Should C(R('ba%', '', ''), R('fo%', '', '')) < 0
  Should C(R('X', '', ''), R('%%%', '', '')) < 0
endfunction




function s:describe__altr__switch()  "{{{1
  " FIXME
endfunction




function s:describe__plugin_definitions()  "{{{1
  It should be loaded.

  Should exists('g:loaded_altr') be true

  It should provide <Plug>(atlr-back)

  Should maparg('<Plug>(altr-back)', 'n') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'x') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 's') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'o') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'i') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'c') =~# '\Valtr#back()'
  Should maparg('<Plug>(altr-back)', 'l') ==# ''

  It should provide <Plug>(atlr-forward)

  Should maparg('<Plug>(altr-forward)', 'n') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'x') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 's') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'o') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'i') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'c') =~# '\Valtr#forward()'
  Should maparg('<Plug>(altr-forward)', 'l') ==# ''
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
